1. Intro to Node.js
- Allows you to build scalable network applications using JavaScript on the server-side
- Javascript on server side with V8 JavaScript Runtime
- Its very fast because it is written in C
- Good for a Websocket Server, Fast File Upload Client, Ad Server, Any Real-Time Data Apps
- Not a web framework, not for beginners, multithreaded
- Example:
var http = require('http'); // how we require modules
http.createServer(function(request, response) {
	 //Status code in header
	response.writeHead(200);
	// Response body
	response.write('Hello');
	// Close the connection
	response.end();	
}).listen(8080); // Listen for connection on this port
console.log('Listening on port 8080...');
- $ node hello.js // to run the server on the command line
- $ curl http://localhost:8080 // will print 'Hello'
- we could also go directly to the link in our browser

2. Events
-Example code:
var events = require('events');
var EventEmitter = events.EventEmitter;
// create a new event emitter object
var chat = new EventEmitter();
// listen for the 'message' event
chat.on('message', function(message){
 console.log(message);
});
- this is how we add event listeners:
- var server = http.createServer();
server.on('request', function(request, response) { ... }); // emitted when a request is sent
- server.on('close', function() { ... }); // emitted when the server closes
- you can also emit custom events
chat.emit('join', 'welcome');
chat.emit('message', 'hi there');
- an alternate way to writing our intro code:
var http = require('http');

var server = http.createServer();
server.on('request', function(request, response) {
 response.writeHead(200);
 response.write("Hello, this is dog");
 response.end();
});
server.listen(8080);

3. Streams
- Streams can be readable, writable, or both
- the request object is a readable stream and the response object is a writable stream: we read data from the request and we write data to the response
- response emits 2 events: readable and end; these events can be handled with the pipe method:
http.createServer(function(request, response) {
	response.writeHead(200);
	response.pipe(response);
}).listen(8080);
- var fs = require('fs'); // require filesystem module
- var file = fs.createReadStream("readme.md");
- var newFile = fs.createWriteStream("readme_copy.md");
file.pipe(newFile);
- using the fs module to read a file and log its contents to the console:
var fs = require('fs');
var file = fs.createReadStream('fruits.txt');
file.on('readable', function() {
	var chunk = null;
 	while(null !== (chunk = file.read())) {
		console.log(chunk.toString());
 	}
});
- Alternate method:
var fs = require('fs');
var file = fs.createReadStream('fruits.txt');
file.pipe(process.stdout);

4. Modules
- require is returning a library module:
var http = require('http');
var fs = require('fs');
- lets create our own module

// custum_hello.js
var hello = function() {
	console.log("hello!");
}
module.exports = hello;
// app.js
var hello = require('./custom_hello');
hello();
- exports defines what require returns

// custom_goodbye.js
exports.goodbye = function() {
	console.log("bye!");
}
// app.js
var gb = require('./custom_goodbye');
gb.goodbye();

- in our first object, we can only set one mudule to module.export, but in the second object, we can set multiple methods to the exports object
- if we only need to call it once, we could write require('./custom_goodbye').goodbye();
- we can also export mulitple functions like so:
var warn = function(message) {
 console.log("Warning: " + message);
};
var info = function(message) {
 console.log("Info: " + message);
};
var error = function(message) {
 console.log("Error: " + message);
};
exports.info = info;
exports.warn = warn;
exports.error = error;
- npmjs.org is the node package manager for modules
- packages are installed like so:
$ npm install underscore // installs underscore
$ npm install coffee-script -g // installs globallly
- example of including dependencies in your package.json file:
{
 "name": "My Awesome Node App",
 "version": "1",
 "dependencies": {
 "connect": "2.1.1",
 "underscore": "1.3.3"
 }
}
- adding ~ before the version number will fetch the latest patch
- see also semver.org

5. Express
- a web development framework fro node
- $ npm install --save express // installs the module and adds to package.json
-
var express = require('express');
var app = express();
app.get('/tweets', function(request, response) {
	response.sendFile(__dirname + "/index.html");
});
app.listen(8080);

6. Socket.io
- $ npm install --save socket.io

7. Persisting Data
- var message = []; store message in array
- data should be stored in a database: MongoDB, CouchDB, PostrgreSQL, Memcached, Riak, Redis (these all have non-blocking drivers)
- $ npm install redis --save
-
var redis = require('redis');
var client = redis.createClient();
client.set("message1", "hello"); // message, value
client.get("message1", function(err, reply) {
	console.log(reply);
});
