1. Variables & Functions
- Beautiful code: least amount of code, readable, easy to maintain
- CoffeeScript compiles into javascript
- no variable declaration and no semi colon
- only function expressions (no named functions)
- functions all have return values
coffee = (param) ->
	return confirm "ready"
coffee = (param) ->
	confirm "ready"
	return //returns nothing
- function calls: 
coffee() // no args
coffee("yo") or coffee "yo" // single arg
coffee("yo", 2) or coffee "yo", 2 // multi arg
- best practice is to use parenthesis on all function calls but the parent call
- write alert coffee("yo", 2) instead of alert coffee "yo", 2 or alert(coffee("yo", 2))
- default or optional parameters in functions: 
coffee = (param = 2) ->
	alert param
	return
- interpolation: "your answer is #\\{answer\\}"
greet = (name='Stranger') ->
	return "Hello, #\\{name\\}"
- this is @
@.object // this.object 
- comments: # my comment
2. Applied jQuery
- $ ->
	$(elem).addClass "active"
- $("#confirm").click (e) ->
	e.preventDefault()
	return
- $ ->
 	$('#newCoffee a').click ->
 		alert 'new coffee added'
- $('#newCoffee a').click ->
	name = prompt 'Name of coffee:'
 	coffee = $(' #\\{name\\} ')
 	$('ul.drink').append(coffee)
- $('.drink li a').click (e) ->
 	e.preventDefault()
 	alert $(@).text()
- $('.drink li').hover(
 	-> $(@).find('span').show()
 	-> $(@).find('span').hide() 
 	)
3. Conditionals & Operators
- various ifs: 
if (age 
	"looking for #\\{brand\\} in #\\{cities.join(', ')\\}" 
searchLocations 'Starbucks', 'Orlando', 'Winter Park'
- a splat takes however many parameters after the first one and combines them into an array, which can be joined in the function
- you can also call a function with a splat
params = ['Starbucks', 'Orlando', 'Winter Park']
searchLocations(params...)
- objects:
coffee = \\{ name: 'French', strength: 1\\}
- we can remove the curly braces and commas
coffee =
	name: 'French'
	strength: 1
	brew: -> alert("brewing #\\{@name\\}")
- Object Iteration with of:
coffees:
	french:
		strength: 1
		in_stock: 0
	italian:
		strength: 2
		in_stock: 12
- "#\\{coffee\\} has #\\{attrs.in_stock\\}" for coffee, attrs of coffees
- for coffee, attrs of coffees
	"#\\{coffee\\} has #\\{attrs.in_stock\\}" 
- to_print = for coffee, attrs of coffees when attrs.in_stock > 0
	"#\\{coffee\\} has #\\{attrs.in_stock\\}"
5. Applied jQuery 2
- filteredFlights = (flight for flight in currentFlights when stops is '2+' or flight.routing is 0)
6. Object Orientation
- Constructors & properties:
class Coffee
	constructor: (name, strength = 1) - > // called when instantiated
		@name = name
		@strength = strength

- alternate way of adding instance variables to the class:
class Coffee
	constructor: (@name, @strength = 1) - >
- french = new Coffee("French", 2)
- Inheritance:
class maxgoodHouse extends Coffee
	constructor: (@name, @strength = 0) - >
		@brand = "Maxgood House"
boring = new MaxgoodHouse("Boring")
- super() calls the version of the function from the parent class:
class Coffee extends Drink
 constructor: (@name, @level=0) ->
 serve: ->
 if @sleeve is false
 return false 
 else super(serve)
- => // the fat arrow binds to the current context of "this", no matter what context you are in
- Example:
class SelectFlight
	constructor: (@fetchingFlights=null) ->
		$("#tabs ul li a").bind
			click: @changeTab
		$("#tabs #error a").click (event) =>
			event.preventDefault()
			@showFlights $("#tabs li a.active").attr("href")
	showFlights: (activeDiv) - > // etc
	changeTab : (event) =>

selectFlights = new SelectFlight()
- Resources:
coffeescript.org
- little book on coffee script // free book
- smooth coffee script // free book
- Coffee Script cook book // free book
